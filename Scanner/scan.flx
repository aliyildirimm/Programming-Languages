%{
	int line_number=1;
	int i; 
	int len;
	char* x="" ;
	int for_minus;
%}


%x comment


tNEGINT	         -[0-9]*[E]?[0-9]*
tPOSREAL	 [+]?[0-9]*\.{1}[0-9]*E?[-]?[0-9]*	
tNEGREAL	 -[0-9]*\.{1}[0-9]+[E]?[-]?[0-9]*
tPOSINT          [+]?[0-9]*[E]?[0-9]*	
tIDENT		 [a-zA-Z][a-zA-Z0-9_]*
tINT		 "int" 
tREAL		 "real"
tIF		 "if"
tENDIF		 "endif"
tVECTOR		 vector
tMATRIX		 matrix
tTRANSPOSE	 transpose
tCOMMA		 \, 
tLPAR		 \( 
tRPAR		 \) 
tMINUS		 \-
tDIV		 \/
tSEMI		 \;
tINEQ		 !=
tLE		 <=
tGE		 >=
tRBRAC 		 \]
tOR		 "||"
tASSIGNM	 \=
tPLUS		 \+
tEQUL 		 ==
tLT 		 \<
tGT		 \>
tLBRAC		 \[
tAND		 \&&
tSTAR		 \*	
tDOTPROD	 \.\*

%%
"//"		 BEGIN(comment);
<comment>"\n"	 {
		 BEGIN(INITIAL);
		 line_number++;
}

<comment>. 
\n		 line_number++;
" "
"\t"	
{tCOMMA}	 printf("%d %s\n", line_number, "tCOMMA");
{tLPAR}	         printf("%d %s\n", line_number, "tLPAR");
{tASSIGNM}	 printf("%d %s\n", line_number, "tASSIGNM");
{tPLUS}		 printf("%d %s\n", line_number, "tPLUS");
{tSTAR}		 printf("%d %s\n", line_number, "tSTAR");
{tDOTPROD}	 printf("%d %s\n", line_number, "tDOTPROD");
{tEQUL}		 printf("%d %s\n", line_number, "tEQUL");
{tLT}		 printf("%d %s\n", line_number, "tLT");
{tGT}		 printf("%d %s\n", line_number, "tGT");
{tLBRAC}	 printf("%d %s\n", line_number, "tLBRAC");
{tAND} 		 printf("%d %s\n", line_number, "tAND");
{tRPAR}		 printf("%d %s\n", line_number, "tRPAR");
{tMINUS}	 printf("%d %s\n", line_number, "tMINUS");
{tDIV}		 printf("%d %s\n", line_number, "tDIV");
{tSEMI}		 printf("%d %s\n", line_number, "tSEMI");
{tINEQ}		 printf("%d %s\n", line_number, "tINEQ");
{tLE}		 printf("%d %s\n", line_number, "tLE");
{tGE}		 printf("%d %s\n", line_number, "tGE");
{tRBRAC}	 printf("%d %s\n", line_number, "tRBRAC");
{tOR}		 printf("%d %s\n", line_number, "tOR");
{tINT}		 printf("%d %s\n", line_number, "tINT");
{tREAL}		 printf("%d %s\n", line_number, "tREAL");
{tIF}		 printf("%d %s\n", line_number, "tIF");
{tENDIF}	 printf("%d %s\n", line_number, "tENDIF");
{tVECTOR}	 printf("%d %s\n", line_number, "tVECTOR");
{tMATRIX}	 printf("%d %s\n", line_number, "tMATRIX");
{tTRANSPOSE}	 printf("%d %s\n", line_number, "tTRANSPOSE");

{tIDENT}	{	 printf("%d %s", line_number, "tIDENT" );
			 printf(" (");	
			 ECHO;	
			 printf(")\n" );
		}

{tPOSINT}	{        printf("%d %s", line_number, "tPOSINT");
			 printf(" (");
			 printf("%s)", yytext);
			 x = strdup(yytext);			 			
			 int len = yyleng;
			 for_minus = 0;
			 func(x,len, for_minus);
	}
	

{tNEGINT}	{	 printf("%d %s", line_number, "tNEGINT");
			 printf(" (");
			 ECHO;
			 printf(")");
			 x = strdup(yytext);
                         int len = yyleng;
			 x = x + 1;
                         
			for_minus = 1;
			func(x,len, for_minus);
			
		}

{tPOSREAL} 	{ 	 printf("%d %s", line_number, "tPOSREAL");
			 printf(" (");
			 printf("%s", yytext);	
			 printf(")" );
			 x = strdup(yytext);
                         int len = yyleng;
			 if(find_E(x, len) != 1){			
                	        printf(" (");
				func_real(x,len);
			 }
			
		}

{tNEGREAL}	{	 printf("%d %s", line_number, "tNEGREAL");
			 printf(" (");
			 ECHO;
			 printf(")" );
			 x = strdup(yytext);
                         int len = yyleng;
                         if(find_E(x, len) != 1){
                                printf(" (");
                                func_real(x,len);
                         }
		}


%%
func(char* x, int le, int  for_minus){
	char* helper = x;
        int count=0 ;
        i = 0;
        while(i < le){
                if(x[0] =='0')  {  x = x + 1;}
                else { break; }
                i++;
        }
	if(helper != x){
		printf("(");
 		if(for_minus == 1){      
        		printf("-");	
		}	
		printf("%s", x); printf(")\n");
	}
	else{
		printf("\n");
	}
}

func_real(char* x, int le){

        i = le-1 ;
        while(0 < i ){
                if(x[i] =='0')  { x[i]="";}
                else { break; }
                i--;
        }
	printf("%s)\n",x);
}

int find_E(char* x, int le){
	int i = 0; 
	for(i ; i < le; i++){	
		if(x[i]=='E')		return 1;
	}		
	return 0;
}
main(){
        yylex();
}
